name: Update LeetCode Stats in README

on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    update-stats:
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Fetch LeetCode Stats and Update README
              env:
                  LEETCODE_USERNAME: dickey
              id: update_readme
              run: |
                  node << 'EOF'
                  const fs = require('fs');
                  const path = require('path');

                  const username = process.env.LEETCODE_USERNAME;
                  const readmePath = 'README.md';
                  const apiUrl = `https://leetcode-stats-api.herokuapp.com/${username}`;
                  const profileUrl = `https://leetcode.com/${username}`;

                  async function fetchStatsAndUpdateReadme() {
                    try {
                      console.log(`Fetching stats for ${username} from ${apiUrl}`);
                      const response = await fetch(apiUrl);

                      if (!response.ok) {
                        if (response.status === 404) {
                           throw new Error(`User '${username}' not found on LeetCode or API error (Status 404).`);
                        }
                        throw new Error(`API request failed with status: ${response.status}`);
                      }

                      const stats = await response.json();

                      const requiredFields = [
                          'status', 'message', 'totalSolved', 'totalQuestions',
                          'easySolved', 'totalEasy', 'mediumSolved', 'totalMedium',
                          'hardSolved', 'totalHard', 'acceptanceRate', 'ranking'
                      ];
                      if (stats.status !== 'success' || !requiredFields.every(field => field in stats)) {
                          console.error("Received data:", JSON.stringify(stats, null, 2));
                          throw new Error('API response structure is not as expected or status is not "success".');
                      }

                      console.log("Successfully fetched stats:", JSON.stringify(stats, null, 2));

                      const solved = {
                        All: stats.totalSolved,
                        Easy: stats.easySolved,
                        Medium: stats.mediumSolved,
                        Hard: stats.hardSolved,
                      };

                      const total = {
                        All: stats.totalQuestions,
                        Easy: stats.totalEasy,
                        Medium: stats.totalMedium,
                        Hard: stats.totalHard,
                      };

                      const rank = stats.ranking > 0 ? stats.ranking.toLocaleString() : "N/A";
                      const acceptanceRate = stats.acceptanceRate != null ? stats.acceptanceRate.toFixed(2) : "N/A";

                      const perc = (s, t) => (t > 0 ? ((s / t) * 100).toFixed(2) : "0.00");
                      const percentages = {
                        All: perc(solved.All, total.All),
                        Easy: perc(solved.Easy, total.Easy),
                        Medium: perc(solved.Medium, total.Medium),
                        Hard: perc(solved.Hard, total.Hard),
                      };

                      let readmeContent = fs.readFileSync(readmePath, 'utf8');
                      let originalContent = readmeContent;

                      const now = new Date();
                      const dateStr = `${now.getMonth() + 1}/${now.getDate()}/${String(now.getFullYear()).slice(-2)}`;

                      // --- Replace H1 Header ---
                      readmeContent = readmeContent.replace(/^# \[Leetcode Solutions - Total: .*?\]\(.*?\).*$/m, `# [Leetcode Solutions - Total: ${solved.All}](${profileUrl})`);

                      // --- Replace Stats Block ---
                      readmeContent = readmeContent.replace(/^- Total Solved:.*$/m, `- Total Solved: ${solved.All}/${total.All} (${percentages.All}%)`);
                      readmeContent = readmeContent.replace(/^- Easy Solved:.*$/m, `- Easy Solved: ${solved.Easy}/${total.Easy} (${percentages.Easy}%)`);
                      readmeContent = readmeContent.replace(/^- Medium Solved:.*$/m, `- Medium Solved: ${solved.Medium}/${total.Medium} (${percentages.Medium}%)`);
                      readmeContent = readmeContent.replace(/^- Hard Solved:.*$/m, `- Hard Solved: ${solved.Hard}/${total.Hard} (${percentages.Hard}%)`);
                      readmeContent = readmeContent.replace(/^- Rank:.*$/m, `- Rank: ${rank}`);
                      readmeContent = readmeContent.replace(/^- Acceptance Rate:.*$/m, `- Acceptance Rate: ${acceptanceRate}%`);
                      readmeContent = readmeContent.replace(/^_Last Updated .*$/m, `_Last Updated ${dateStr}_`);

                      // --- Replace Difficulty Headers ---
                      readmeContent = readmeContent.replace(/^## Hard Problems - \d+\/\d+$/m, `## Hard Problems - ${solved.Hard}/${total.Hard}`);
                      readmeContent = readmeContent.replace(/^## Medium Problems - \d+\/\d+$/m, `## Medium Problems - ${solved.Medium}/${total.Medium}`);
                      readmeContent = readmeContent.replace(/^## Easy Problems - \d+\/\d+$/m, `## Easy Problems - ${solved.Easy}/${total.Easy}`);

                      // --- Remove Beats Lines ---
                      readmeContent = readmeContent.replace(/^Beats: .* users$/gm, '');
                      readmeContent = readmeContent.replace(/^Beats: .* of users$/gm, '');

                      // --- Clean Up Spacing ---
                      readmeContent = readmeContent.replace(/\n{3,}/g, '\n\n'); // Reduce multiple blank lines
                      readmeContent = readmeContent.replace(/\n\n(\#\#\#\s+(Easy|Medium|Hard) Problems)/g, '\n$1'); // Adjust space before H3
                      readmeContent = readmeContent.replace(/\n\n(\#\#\s+(Easy|Medium|Hard) Problems)/g, '\n$1'); // Adjust space before H2

                      // --- Write File if Changed ---
                      if (readmeContent !== originalContent) {
                        fs.writeFileSync(readmePath, readmeContent, 'utf8');
                        console.log('README stats and headers updated successfully.');
                        fs.appendFileSync(process.env.GITHUB_OUTPUT, `changes_made=true\n`);
                      } else {
                        console.log('No changes detected in stats or headers. README not updated.');
                        fs.appendFileSync(process.env.GITHUB_OUTPUT, `changes_made=false\n`);
                      }

                    } catch (error) {
                      console.error('Failed to fetch LeetCode stats or update README:', error);
                      process.exit(1);
                    }
                  }

                  fetchStatsAndUpdateReadme();
                  EOF

            - name: Commit and Push Changes
              if: steps.update_readme.outputs.changes_made == 'true'
              uses: stefanzweifel/git-auto-commit-action@v5
              with:
                  commit_message: "ðŸ§¹ Update README stats"
                  commit_user_name: "github-actions[bot]"
                  commit_user_email: "github-actions[bot]@users.noreply.github.com"
                  commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
                  file_pattern: "README.md"
